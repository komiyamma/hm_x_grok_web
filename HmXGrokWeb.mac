/*
 * HmXGrokWeb v 1.0.0.1
 *
 * Copyright (c) 2025 Akitsugu Komiyama
 * under the MIT License
 */


jsmode "WebView2\\HmXGrokWeb";

js {

// ------------- 会話エンジンの設定項目 -------------

const renderPaneCustomParam = {
    place: "rightside",            // leftside | rightside | upside | downside
    size: 400,                     // 左や右の配置の時は、横幅のこと。上や下の配置の時は縦幅のこと。
};

const isOneAtTimeAIRenderPane = 1; // AI関連のレンダリング枠は(他の種類のAIも含め)１つだけにする。(複数起動しそうになると、前のものが閉じる）

// --------------------------------------------------

const renderPaneTargetName = "HmXGrokWeb";

const hidemaruExeDir = hidemarudir();

const currentMacroDirectory = currentmacrodirectory();



var timeHandleOfWindowCloseCheck = 0;
if (timeHandleOfWindowCloseCheck) {
    hidemaru.clearTimeout(timeHandleOfWindowCloseCheck);
}

// AIウィンドウを１つだけに絞る処理(他のAIシリーズがレンダリングペイン実装なので無理やり辻褄をあわせている)
function oneAIWindowFrameCheck() {
    try {
        if (!isOneAtTimeAIRenderPane) {
            return;
        }

        let lastAiRenderPaneTargetName = getstaticvariable("OneAtTimeAIRenderPane", 2);

        // 自分だよ、何もしない。
        if (lastAiRenderPaneTargetName == renderPaneTargetName) {
            return;
        }

        // 他のAIマクロがAIパネル枠を利用しているなら、閉じる
        if (lastAiRenderPaneTargetName) {
            const param = {
                target: lastAiRenderPaneTargetName,
                show: 0,
            };

            renderpanecommand(param);
        }

        timeHandleOfWindowCloseCheck = hidemaru.setTimeout(oneAIWindowCloseCheck, 500);
    } catch (err) {
        outputAlert(err);
    }

}

// 自分自身でGrokウィンドウを終了するかチェック継続
// 本来なら他のAIシリーズがクローズするのであるが、
// HmXGrokWebはレンダリングペイン実装ではなく、個別ブラウザ枠実装なので無理やり辻褄をあわせている
function oneAIWindowCloseCheck() {

    // 他のAIシリーズのウィンドウが開かれていたら、
    let lastAiRenderPaneTargetName = getstaticvariable("OneAtTimeAIRenderPane", 2);
    if (lastAiRenderPaneTargetName != renderPaneTargetName) {
        // クローズタイマーは無意味になってるので終了
        hidemaru.clearTimeout(timeHandleOfWindowCloseCheck);
        // 自武のウィンドウなら、
        let url = browserpanecommand({
            "target": "_each",
            "get": "url",
        });

        // 個別ブラウザ枠がgrok.comならば、閉じる(万全ではないが、まぁ仕方がないだろう)
        if (url.includes("https://grok.com")) {
            browserpanecommand({ target: "_each", show: 0 });
        }
        return;
    }

    // 自分自身でGrokウィンドウを終了するかチェック継続
    timeHandleOfWindowCloseCheck = hidemaru.setTimeout(oneAIWindowCloseCheck, 300);
}


function outputAlert(msg) {
    let dll = loaddll("HmOutputPane.dll");
    dll.dllfuncW.OutputW(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}

// 質問内容のテキスト
function getQuestionText() {
    let text = getselectedtext();
}

// ブラウザウィンドウオープン
function openRenderPaneCommand(text) {
    let renderPaneOriginalParam = {
        target: "_each",
        url: "https://grok.com/?q=" + encodeURI(text),
        initialize: "async",
        show: 1,
        size: 400,
    };

    const browserPaneMixParam = { ...renderPaneOriginalParam, ...renderPaneCustomParam };

    browserpanecommand(browserPaneMixParam);

    // １つのウィンドウに絞るフラグがONなら、登録しておく
    if (isOneAtTimeAIRenderPane) {
        setstaticvariable("OneAtTimeAIRenderPane", renderPaneTargetName, 2);
    }

}
// メイン処理
function doMain() {

    // 質問内容のテキスト
    let text = getQuestionText();

    if (text) {

        // AIウィンドウフレームに絞るかどうか
        oneAIWindowFrameCheck();

        // ブラウザウィンドウ開く
        openRenderPaneCommand(text);
    }
}

hidemaru.setTimeout(doMain, 0);

}
