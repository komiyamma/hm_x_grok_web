/*
 * HmXGrokWeb v 1.1.0.3
 *
 * Copyright (c) 2025 Akitsugu Komiyama
 * under the MIT License
 */


hidemaruversion "9.35.99";

jsmode @"WebView2\HmXGrokWeb";

js {

// ------------- 会話エンジンの設定項目 -------------

const baseUrl = "https://grok.com/";

const renderPaneCustomParam = {
    place: "rightside",            // leftside | rightside | upside | downside
    size: 450,                     // 左や右の配置の時は、横幅のこと。上や下の配置の時は縦幅のこと。
};

const isOneAtTimeAIRenderPane = 1; // AI関連のレンダリング枠は(他の種類のAIも含め)１つだけにする。(複数起動しそうになると、前のものが閉じる）

// --------------------------------------------------

const renderPaneTargetName = "HmXGrokWeb";

const currentMacroDirectory = currentmacrodirectory();

const com = createobject(currentMacroDirectory + "\\HmXGrokWeb.dll", "HmXGrokWeb.HmXGrokWeb");

// 前回分が実行されずに溜まっていたら除去
var timeHandleOfWindowCloseCheck;
if (typeof(timeHandleOfWindowCloseCheck) != "undefined") {
    hidemaru.clearTimeout(timeHandleOfWindowCloseCheck);
}

// AIウィンドウを１つだけに絞る処理(他のAIシリーズがレンダリングペイン実装なので無理やり辻褄をあわせている)
function oneAIWindowFrameCheck() {

    if (!isOneAtTimeAIRenderPane) {
        return;
    }

    try {

        let lastAiRenderPaneTargetName = getstaticvariable("OneAtTimeAIRenderPane", 2);

        // 自分だよ、何もしない。
        if (lastAiRenderPaneTargetName == renderPaneTargetName) {
            return;
        }

        // 他のAIマクロがAIパネル枠を利用しているなら、閉じる
        if (lastAiRenderPaneTargetName) {
            const param = {
                target: lastAiRenderPaneTargetName,
                show: 0,
            };

            renderpanecommand(param);
        }
    } catch (err) {
        outputAlert(err);
    }
}


// AIウィンドウを１つだけに絞る処理情報の上書き
function oneAIWindowFrameUpdate() {

    if (!isOneAtTimeAIRenderPane) {
        return;
    }

    setstaticvariable("OneAtTimeAIRenderPane", renderPaneTargetName, 2);

    timeHandleOfWindowCloseCheck = hidemaru.setTimeout(oneAIWindowCloseCheck, 300);
}


// 自分自身でGrokウィンドウを終了するかチェック継続
// 本来なら他のAIシリーズがクローズするのであるが、
// HmXGrokWebはレンダリングペイン実装ではなく、個別ブラウザ枠実装なので無理やり辻褄をあわせている
function oneAIWindowCloseCheck() {

    // 他のAIシリーズのウィンドウが開かれていたら、
    let lastAiRenderPaneTargetName = getstaticvariable("OneAtTimeAIRenderPane", 2);

    // 同じということは状況が継続している。
    if (lastAiRenderPaneTargetName == renderPaneTargetName) {
        timeHandleOfWindowCloseCheck = hidemaru.setTimeout(oneAIWindowCloseCheck, 300);
        return;
    }

    // クローズタイマーは無意味になってるので終了
    hidemaru.clearTimeout(timeHandleOfWindowCloseCheck);

    // 個別ブラウザ枠が、このXGrokだと思われるならば、
    let url = browserpanecommand({
        "target": "_each",
        "get": "url",
    });

    // 新たなAIがWebならなにもしない。同じ個別ブラウザで開かれるだろうから
    if (lastAiRenderPaneTargetName.endsWith("Web")) {
        return;
    }

    // 個別ブラウザ枠がgrok.comならば、閉じる(万全ではないが、まぁ仕方がないだろう)
    if (url.includes(baseUrl)) {
        browserpanecommand({
            target: "_each",
            show: 0
        });
    }

}

// アウトプット枠に文字列を出力
function outputAlert(msg) {
    let dll = loaddll("HmOutputPane.dll");
    dll.dllfuncW.OutputW(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}

// 質問内容のテキスト
function getQuestionText() {

    // 外部からカスタムで定義されている。
    if (typeof(onRequestQuestionText) == "function") {
        return onRequestQuestionText();
    }

    return getselectedtext();
}

// urlの構築
function makeUrl(baseUrl, text) {
    const absoluteUrl = new URL(baseUrl);
    const params = new URLSearchParams({ q: text });
    absoluteUrl.search = params.toString();
    return absoluteUrl.href;
}

// ブラウザウィンドウオープン
function openRenderPaneCommand(text) {

    // 個別ブラウザ枠が、このCopilotだと思われるならば、
    let url = browserpanecommand({
        "target": "_each",
        "get": "url",
    });

    // 開かれていない時だけ...
    if (!url.includes(baseUrl)) {

        const url = makeUrl(baseUrl, text);

        let renderPaneOriginalParam = {
            target: "_each",
            url: url,
            initialize: "async",
            show: 1,
            size: 450,
        };

        const browserPaneMixParam = { ...renderPaneOriginalParam, ...renderPaneCustomParam };

        browserpanecommand(browserPaneMixParam);
    }
    
    // すでにHmXGrokWeb が開かている
    else {
        hidemaru.setTimeout(waitBrowserPane, 0, text);
    }
}

function waitBrowserPane(text) {
    const status = browserpanecommand({
        target: "_each",
        get: "readyState"
    });
    
    if (status == "complete") {
        setFocusToBrowserPane();
        timeHandleOfDoMain = hidemaru.setTimeout(onCompleteBrowserPane, 300, text);
    }
    
    else {
        timeHandleOfDoMain = hidemaru.setTimeout(waitBrowserPane, 300, text);
    }
}

function onCompleteBrowserPane(text) {
    try {
        setFocusToBrowserPane();
        browserpanecommand({
            target: "_each",
            "focusinputfield" : 1,
        });
        captureClipBoard();
        com.PasteToBrowserPane(text);
    } catch(e) {
    } finally {
        timeHandleOfDoMain = hidemaru.setTimeout(onBeginAIAnswer, 2000);
    }
}

function setFocusToBrowserPane() {
    const eachBrowserPane = 6;
    setfocus(eachBrowserPane);
}

var orgFocus = getfocus();
function onBeginAIAnswer() {
    browserpanecommand({
        target: "_each",
        restoremaximize:1,
        invisible: 0
    });
    
    const browserPaneMixParam = { ...{"target": "_each"}, ...renderPaneCustomParam };
    browserpanecommand(browserPaneMixParam);
    setfocus(orgFocus);
    restoreClipBoard();
}

function captureClipBoard() {
    try {
        console.log("キャプチャー");
        com.CaptureClipboard();
    } catch(e) {}
}

function restoreClipBoard() {
    try {
        // Windows 10 の 1809 以降にはクリップボード履歴がある
        var processInfo = hidemaru.runProcess(currentMacroDirectory + "\\ClipboardHistMngr.exe", ".", "stdio", "sjis" );
        processInfo.onClose = function() {
            console.log("リストア");
            // 普通のクリップボードの復元
            com.RestoreClipboard();
        }
    } catch(e) {}
}


// 前回分が実行されずに溜まっていたら除去
var timeHandleOfDoMain;
if (typeof(timeHandleOfDoMain) != "undefined") {
    hidemaru.clearTimeout(timeHandleOfDoMain);
}

// メイン処理
function doMain() {

    // 質問内容のテキスト。外部マクロからquestion内容を上書きしやすいようにするため、ここだけ同期
    let text = getQuestionText();
    if (!text) {
        return;
    }

    timeHandleOfDoMain = hidemaru.setTimeout(doAsyncAction, 0, text);
}

// 秀丸の同期スレッドに負荷をかけないため、非同期に逃がす
function doAsyncAction(text) {
    // AIウィンドウフレームに絞るかどうか
    oneAIWindowFrameCheck();

    // ブラウザウィンドウ開く
    openRenderPaneCommand(text);

    // AIウィンドウフレーム情報更新
    oneAIWindowFrameUpdate();
}

doMain();

} // js
